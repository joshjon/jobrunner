// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joshjon/jobrunner/internal/server (interfaces: Worker)

// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	worker "github.com/joshjon/jobrunner/pkg/worker"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// FollowLogs mocks base method.
func (m *MockWorker) FollowLogs(arg0 string) (<-chan string, worker.CancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowLogs", arg0)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(worker.CancelFunc)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FollowLogs indicates an expected call of FollowLogs.
func (mr *MockWorkerMockRecorder) FollowLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowLogs", reflect.TypeOf((*MockWorker)(nil).FollowLogs), arg0)
}

// QueryJob mocks base method.
func (m *MockWorker) QueryJob(arg0 string) (worker.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryJob", arg0)
	ret0, _ := ret[0].(worker.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryJob indicates an expected call of QueryJob.
func (mr *MockWorkerMockRecorder) QueryJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryJob", reflect.TypeOf((*MockWorker)(nil).QueryJob), arg0)
}

// StartJob mocks base method.
func (m *MockWorker) StartJob(arg0 worker.Command) (*worker.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0)
	ret0, _ := ret[0].(*worker.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockWorkerMockRecorder) StartJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockWorker)(nil).StartJob), arg0)
}

// StopJob mocks base method.
func (m *MockWorker) StopJob(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopJob indicates an expected call of StopJob.
func (mr *MockWorkerMockRecorder) StopJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockWorker)(nil).StopJob), arg0)
}
